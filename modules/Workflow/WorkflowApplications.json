{
  "BuildingApplications": {
    "API": {
      "Inputs": [
      ],
      "Outputs": [
        {
          "id": "buildingFile",
          "type": "string",
          "description": "name of JSON file containing an array of id,filename pairs. For each building id the aplication creates a BIM file with name filename",
          "default": "buildingsFile.json"
        }
      ]
    },
    "Applications": [
      {
        "Name": "GenericBimDatabase",
        "ExecutablePath": "applications/createBIM/genericBimDatabase/GenericBimDatabase",
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of building to obtain BIM for",
            "default": 1
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of building to obtain BIM for",
            "default": 10
          },
          {
            "id": "buildingSourceFile",
            "type": "path",
            "description": "path to buildings file",
            "default": ""
          },
          {
            "id": "config",
            "type": "path",
            "description": "path to buildings config file",
            "default": ""
          }
        ]
      },
      {
        "Name": "GeoJSON_to_BIM",
        "ExecutablePath": "applications/createBIM/GeoJSON_to_BIM/GeoJSON_to_BIM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of building to obtain BIM for",
            "default": 1
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of building to obtain BIM for",
            "default": 10
          },
          {
            "id": "buildingSourceFile",
            "type": "path",
            "description": "path to buildings database file",
            "default": ""
          },
          {
            "id": "configFile",
            "type": "path",
            "description": "path to workflow config file",
            "default": ""
          }
        ]
      },
      {
        "Name": "CSV_to_BIM",
        "ExecutablePath": "applications/createBIM/CSV_to_BIM/CSV_to_BIM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of building to obtain BIM for",
            "default": 1
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of building to obtain BIM for",
            "default": 10
          },
          {
            "id": "buildingSourceFile",
            "type": "path",
            "description": "path to buildings database file",
            "default": ""
          }
        ]
      }
    ]
  },
  "RegionalEventApplications": {
    "API": {
      "Inputs": [
      ],
      "Outputs": [
      ]
    },
    "Applications":[
    ]
  },
  "RegionalMappingApplications": {
    "API": {
      "Inputs":[
        {
          "id": "buildingFile",
          "type": "path",
          "description": "Name of JSON file containing an array of id,filename pairs. For each building id the aplication creates a BIM file with name filename",
          "default": "buildings.json"
        }
      ],
      "Outputs":[
      ]
    },
    "Applications": [
      {
        "Name": "NearestNeighborEvents",
        "ExecutablePath": "applications/performRegionalMapping/NearestNeighborEvents/NNE.py",
        "ApplicationSpecificInputs": [
          {
            "id": "filenameEVENTgrid",
            "type": "path",
            "description": "Path to file containing location information on each event file"
          },
          {
            "id": "samples",
            "type": "int",
            "description": "Number of event samples to use (interesting when using more than one neighbors)"
          },
          {
            "id": "neighbors",
            "type": "int",
            "description": "Number of neighbors to consider for each asset."
          },
          {
            "id": "filter_label",
            "type": "string",
            "description": "Custom label to use for pre-selection of grid points"
          }
        ]
      }
    ]
  },
  "EventApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameBIM",
          "type": "string",
          "description": "name of bim file",
          "default": "BIM.json"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEVENT",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "EVENT.json"
      }
      ]
    },
    "Applications": [
      {
        "Name": "SimCenterEvent",
        "ExecutablePath": "applications/createEVENT/SimCenterEvent.py",
        "ApplicationSpecificInputs": [
	]
      },
      {
        "Name": "ExistingSimCenterEvents",
        "ExecutablePath": "applications/createEVENT/multipleSimCenter/MultipleSCEvents",
        "ApplicationSpecificInputs": [
	]
      },
      {
        "Name": "ExistingPEER_Events",
        "ExecutablePath": "applications/createEVENT/multiplePEER/MultiplePEER",
        "ApplicationSpecificInputs": [
	]
      },
      {
        "Name": "Site Response",
        "ExecutablePath": "applications/createEVENT/siteResponse/SiteResponse.py",
        "ApplicationSpecificInputs": [
	]
      },
      {
        "Name": "HazardBasedEvent",
        "ExecutablePath": "applications/createEVENT/hazardBasedEvent/HazardBasedEvent.py",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "DEDM_HRP",
        "ExecutablePath": "applications/createEVENT/DEDM_HRP/DEDM_HRP.py",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "LowRiseTPU",
        "ExecutablePath": "applications/createEVENT/LowRiseTPU/LowRiseTPU",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "WindTunnelExperiment",
        "ExecutablePath": "applications/createEVENT/windTunnelExperiment/WindTunnelExperiment",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "StochasticWindWittigSinha",
        "ExecutablePath": "applications/createEVENT/stochasticWind/StochasticWind",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "StochasticGroundMotion",
        "ExecutablePath": "applications/createEVENT/stochasticGroundMotion/StochasticGM",
        "ApplicationSpecificInputs":[
          {
            "id": "modelName",
            "type": "string",
            "description": "..."
          },
          {
            "id": "seed",
            "type": "int",
            "description": "..."
          }
        ]
      },
      {
        "Name": "CFDEvent",
        "ExecutablePath": "applications/createEVENT/CFDEvent/CFDEvent.py",
        "ApplicationSpecificInputs":[
		{
			"id":"OpenFOAMCase",
			"type":"string",
            "description": "Remote directory containing OpenFOAM case input"
		},{
			"id":"OpenFOAMSolver",
			"type":"string",
            "description": "OpenFOAM solver used"
		}]
      },
      {
        "Name": "NNGM",
        "ExecutablePath": "applications/createEVENT/NNGM/NNGM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "groundMotions",
            "type": "path",
            "description": "Configuration file with information about the ground motions to use"
          },
          {
            "id": "recordsFolder",
            "type": "path",
            "description": "Folder containing records"
          }
        ]
      },
      {
        "Name": "LLNL-SW4",
        "ExecutablePath": "applications/createEVENT/LLNL_SW4/LLNL_SW4.py",
        "ApplicationSpecificInputs": [
          {
            "id": "pathSW4results",
            "type": "path",
            "description": "Path to directory containig output point files"
          }
        ]
      },
      {
        "Name": "SimCenterEvent",
        "ExecutablePath": "applications/createEVENT/SimCenterEvent/SimCenterEvent.py",
        "ApplicationSpecificInputs": [
          {
            "id": "pathEventData",
            "type": "path",
            "description": "Path to directory containig event data files in SimCenter format"
          }
        ]
      },
      {
        "Name": "ASCE7_WindSpeed",
        "ExecutablePath": "applications/createEVENT/ASCE7_WindSpeed/ASCE7_WindSpeed.py",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "pointWindSpeed",
        "ExecutablePath": "applications/createEVENT/pointWindSpeed/pointWindSpeed",
        "ApplicationSpecificInputs":["filenameWindSpeedCloudData"]
      }
    ]
  },
  "ModelingApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameBIM",
          "type": "string",
          "description": "name of bim file",
          "default": "BIM.json"
      },
      {
          "id": "filenameEVENT",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "EVENT.json"
      }
      ],
      "Outputs": [
      {
          "id": "filenameSAM",
          "type": "string",
          "description": "name of file containing the outputted SAM",
          "default": "SAM.json"
      }
      ]
    },
    "Applications": [
      {
        "Name": "MDOF-LU",
        "ExecutablePath": "applications/createSAM/MDOF-LU/MDOF-LU",
        "ApplicationSpecificInputs": [
          {
            "id": "hazusData",
            "type": "path",
            "description": "Defines the location of the hazus building config data file."
          },
          {
            "id": "stdStiffness",
            "type": "float",
            "description": "Defines the standard deviation that should be considered when sampling the stiffness for the building."
          },
          {
            "id": "stdDamping",
            "type": "float",
            "description": "Defines the standard deviation that should be considered when sampling the damping ratio for the building."
          }
        ]
      },
      {
        "Name": "OpenSeesInput",
        "ExecutablePath": "applications/createSAM/openSeesInput/OpenSeesInput",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "OpenSeesPyInput",
        "ExecutablePath": "applications/createSAM/openSeesPyInput/OpenSeesPyInput.py",
        "ApplicationSpecificInputs": [
          {
            "id": "modelPath",
            "type": "path",
            "description": "Defines the location of the OpenSeesPy model files."
          },
          {
            "id": "mainScript",
            "type": "string",
            "description": "Defines the name of the main model file."
          },
          {
            "id": "ndm",
            "type": "int",
            "description": "Defines the number of degrees of freedom in the numerical model."
          },
          {
            "id": "dofMap",
            "type": "string",
            "description": "The workflow assumes X=1, Y=2, Z=3 mapping between directions and degrees of freedom; XY being the horizontal directions. This input allows you to define an alternative mapping by providing three numbers separated by commas in a string, such as '1, 3, 2' if you want to have Y as the vertical direction."
          },
          {
            "id": "ctrlNodes",
            "type": "string",
            "description": "Defines the ids of the control nodes that shall be used for EDP calculations. Only the firsts n+1 nodes will be used for an n-story building."
          }
        ]
      },
      {
        "Name": "MDOF_BuildingModel",
        "ExecutablePath": "applications/createSAM/mdofBuildingModel/MDOF_BuildingModel",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "SteelBuildingModel",
        "ExecutablePath": "applications/createSAM/AutoSDA/main_program.py",
        "ApplicationSpecificInputs": []
      }
    ]
  },
  "EDPApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameBIM",
          "type": "string",
          "description": "name of bim file",
          "default": "BIM.json"
      },
      {
          "id": "filenameEVENT",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "EVENT.json"
      },
      {
          "id": "filenameSAM",
          "type": "string",
          "description": "name of file containing the SAM",
          "default": "SAM.json"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEDP",
          "type": "string",
          "description": "name of file containing the EDP to be determined from the analysis",
          "default": "EDP.json"
      }
      ]
    },
    "Applications": [
      {
        "Name": "StandardEarthquakeEDP",
        "ExecutablePath": "applications/createEDP/standardEarthquakeEDP/StandardEQEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardEarthquakeEDP_R",
        "ExecutablePath": "applications/createEDP/standardEarthquakeEDP_R/StandardEarthquakeEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardWindEDP",
        "ExecutablePath": "applications/createEDP/standardWindEDP/StandardWindEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardGMT_EDP",
        "ExecutablePath": "applications/createEDP/gmtEDP/StandardGMT_EDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "UserDefinedEDP",
        "ExecutablePath": "applications/createEDP/userEDP/UserDefinedEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "UserDefinedEDP_R",
        "ExecutablePath": "applications/createEDP/userEDP_R/UserDefinedEDP.py",
        "ApplicationSpecificInputs": [
          {
            "id": "EDPspecs",
            "type": "path",
            "description": "Identifies the location of a json file that specifies the requested EDPs."
          }
        ]
      },
      {
        "Name": "SimpleEDP",
        "ExecutablePath": "applications/createEDP/simpleEDP/simpleEDP.py",
        "ApplicationSpecificInputs": []
      }
    ]
  },
  "SimulationApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameBIM",
          "type": "string",
          "description": "name of file containing the BIM",
          "default": "BIM.json"
      },
      {
          "id": "filenameSAM",
          "type": "string",
          "description": "name of file containing the SAM",
          "default": "SAM.json"
      },
      {
          "id": "filenameEVENT",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "EVENT.json"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEDP",
          "type": "string",
          "description": "name of EDP file to be added to",
          "default": "EDP.json"
      },
      {
          "id": "filenameSIM",
          "type": "string",
          "description": "name of SIM file to be added to",
          "default": "SIM.json"
      }
      ]
    },
    "Applications": [
      {
        "Name": "OpenSees-Simulation",
        "ExecutablePath": "applications/performSIMULATION/openSees/OpenSeesSimulation.py"
      },
      {
        "Name": "OpenSeesPy-Simulation",
        "ExecutablePath": "applications/performSIMULATION/openSeesPy/OpenSeesPySimulation.py"
      },
      {
        "Name": "ExtractPGA",
        "ExecutablePath": "applications/performSIMULATION/extractPGA/ExtractPGA"
      },
      {
        "Name": "OpenSees-Simulation_R",
        "ExecutablePath": "applications/performSIMULATION/openSees_R/OpenSeesSimulation.py"
      },
      {
        "Name": "IMasEDP",
        "ExecutablePath": "applications/performSIMULATION/IMasEDP/IMasEDP.py"
      }
    ]
  },
  "UQApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameBIM",
          "type": "string",
          "description": "name of file containing the BIM",
          "default": "BIM.json"
      },
      {
          "id": "filenameSAM",
          "type": "string",
          "description": "name of file containing the SAM",
          "default": "SAM.json"
      },
      {
          "id": "filenameEVENT",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "EVENT.json"
      },
      {
          "id": "filenameEDP",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "EDP.json"
      },
      {
          "id": "filenameSIM",
          "type": "string",
          "description": "name of file containing the event data",
          "default": "SIM.json"
      },
      {
          "id": "driverFile",
          "type": "string",
          "description": "name of file containing the simulation driver",
          "default": "driver"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEDP",
          "type": "string",
          "description": "name of EDP file to be added to",
          "default": "EDP.json"
      }
      ]
    },
    "Applications": [
      {
        "Name": "Dakota-UQ",
        "ExecutablePath": "applications/performUQ/dakota/DakotaFEM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "method",
            "type": "string",
            "description": "Defines the UQ method to use."
          },
          {
            "id": "samples",
            "type": "int",
            "description": "Specifies the number of realizations to generate. For surrogate models, these samples are used to train the model."
          },
          {
            "id": "samples2",
            "type": "int",
            "description": "Only for surrogate models. Specifies the number of realizations to generate from the trained model."
          },
          {
            "id": "seed",
            "type": "int",
            "description": "Specifies the random seed."
          },
          {
            "id": "seed2",
            "type": "int",
            "description": "Only for surrogate models. Specifies the random seed to generate samples from the models."
          },
          {
            "id": "ismethod",
            "type": "string",
            "description": "Specifies the importance sampling method."
          },
          {
            "id": "dataMethod",
            "type": "string",
            "description": "..."
          },
          {
            "id": "dataMethod2",
            "type": "string",
            "description": "..."
          },
          {
            "id": "type",
            "type": "string",
            "description": "..."
          },
          {
            "id": "concurrency",
            "type": "int",
            "description": "Specifies the number of processes to use for simulation."
          },
          {
            "id": "keepSamples",
            "type": "bool",
            "description": "True if the intermediate results shall be kept for each sample."
          },
          {
            "id": "runType",
            "type": "string",
            "description": "..."
          }
        ]
      },
      {
        "Name": "Dakota-FEM",
        "ExecutablePath": "applications/performUQ/dakota_R/DakotaFEM.py"
      },{
        "Name": "Dakota-UQ1",
        "ExecutablePath": "applications/performUQ/dakota/DakotaFEM1.py"
      }
    ]
  },
  "DLApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameDL",
          "type": "string",
          "description": "name of file containing the DL model information",
          "default": "BIM.json"
      },
      {
          "id": "filenameEDP",
          "type": "string",
          "description": "name of file containing the EDP data",
          "default": "response.csv"
      }
      ],
      "Outputs": [
      {
          "id": "outputEDP",
          "type": "string",
          "description": "name of file to store response estimates",
          "default": "EDP.csv"
      },
      {
          "id": "outputDM",
          "type": "string",
          "description": "name of file to store damage estimates",
          "default": "DM.csv"
      },
      {
          "id": "outputDV",
          "type": "string",
          "description": "name of DV file to store decision variable estimates",
          "default": "DV.csv"
      }
      ]
    },
    "Applications": [
      {
        "Name": "pelicun",
        "ExecutablePath": "applications/performDL/pelicun/DL_calculation.py",
        "ApplicationSpecificInputs": [
          {
            "id": "DL_Method",
            "type": "string",
            "description": "Defines the damage and loss assessment method."
          },
          {
            "id": "Realizations",
            "type": "int",
            "description": "Specifies the number of realizations to generate"
          },
          {
            "id": "detailed_results",
            "type": "bool",
            "description": "If false, only the main results are saved to improve performance."
          },
          {
            "id": "log_file",
            "type": "bool",
            "description": "If false, pelicun does not create a log file."
          },
          {
            "id": "coupled_EDP",
            "type": "bool",
            "description": "If true, the raw EDPs are used as-is without re-sampling."
          },
          {
            "id": "event_time",
            "type": "string",
            "description": "Defines the time of the event in YYYY-MM-DD:HH format. 'off' turns all time-effects off."
          },
          {
            "id": "ground_failure",
            "type": "bool",
            "description": "If true, fragility groups associated with ground failure are added in the auto-population phase. Note that such analysis requires PGD values as inputs."
          },
          {
            "id": "auto_script",
            "type": "path",
            "description": "Identifies the location of a python script that can be used to auto-populate the loss model."
          }
        ]
      }
    ]
  }
}


